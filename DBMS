Explain Various Integrity Constraints?
Integrity constraints are the set of predefined rules that are used to maintain the quality of information. 

Primary Key Constraint:
Description: Ensures that each row in a table is uniquely identified by a primary key.
Example: CREATE TABLE Employees (emp_id INT PRIMARY KEY, name VARCHAR(100));
Purpose: Prevents duplicate entries and ensures data uniqueness.

2. Unique Constraint:
Description: Ensures that values in a column (or a group of columns) are unique.
Example: CREATE TABLE Students (roll_no INT UNIQUE, name VARCHAR(100));
Purpose: Ensures uniqueness but allows null values.

3. Foreign Key Constraint:
Description: Enforces referential integrity by ensuring that values in a column (foreign key) match values in another table's primary key (parent key).
Example:
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);
Purpose: Maintains relationships between tables and prevents orphaned records.

4. Check Constraint:
Description: Validates data based on a specified condition.
Example: CREATE TABLE Employees (age INT CHECK (age >= 18));
Purpose: Ensures that data meets certain conditions before being inserted or updated.

5. Not Null Constraint:
Description: Ensures that a column cannot contain NULL values.
Example: CREATE TABLE Employees (emp_id INT NOT NULL, name VARCHAR(100));
Purpose: Ensures that essential data is always provided.

6. Entity Integrity Constraint:
Description: Ensures that each row in a table is uniquely identifiable.
Example: A combination of Primary Key and Unique constraints.
Purpose: Guarantees that no duplicate rows exist in the table.

7. Referential Integrity Constraint:
Description: Ensures that relationships between tables are maintained correctly.
Example: Foreign Key constraint.
Purpose: Prevents inconsistencies and maintains data integrity across related tables.

8. Domain Constraint:
Description: Defines the permissible values for a column.
Example: CREATE TABLE Students (age INT CHECK (age BETWEEN 18 AND 25));
Purpose: Ensures that data falls within specified ranges or values.

1.What is Normalization?
  Normalization is the process of organizing the data in the database.
  Normalization is used to minimize the redundancy from a relation or set of relations. It is also used to eliminate undesirable characteristics like Insertion, Update, and Deletion Anomalies.
  Normalization divides the larger table into smaller and links them using relationships.
  The normal form is used to reduce redundancy from the database table.

Data modification anomalies can be categorized into three types:
  Insertion Anomaly: Insertion Anomaly refers to when one cannot insert a new tuple into a relationship due to lack of data.
  Deletion Anomaly: The delete anomaly refers to the situation where the deletion of data results in the unintended loss of some other important data.
  Updatation Anomaly: The update anomaly is when an update of a single data value requires multiple rows of data to be updated.

What is Multivalued Dependency?
When one attribute in a database depends on another attribute and has many independent values, it is said to have multivalued dependency (MVD).

Types of Join Dependency

There are two types of Join Dependencies:
Lossless Join Dependency:
          It means that whenever the join occurs between the tables, then no information should be lost, the new table must have all the content in the original table.
Lossy Join Dependency: 
          In this type of join dependency, data loss may occur at some point in time which includes the absence of a tuple from the original table or duplicate tuples within the database.


Normal Form	      Description

1NF	              A relation is in 1NF if it contains an atomic value.
2NF	              A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key.This means that each column should be directly                        related to the primary key, and not to other columns.
3NF	              A relation will be in 3NF if it is in 2NF and no transition dependency exists.
BCNF	            A stronger definition of 3NF is known as Boyce Codd's normal form.
4NF	              A relation will be in 4NF if it is in Boyce Codd's normal form and has no multi-valued dependency.
5NF	              A relation is in 5NF. If it is in 4NF and does not contain any join dependency, joining should be lossless.


2.What is a View?
  View is a virtual table in which the records are not stored explicitly, 
  In DBMS, a view is a virtual table that provides a way to present data from one or more tables through a single query without storing the data itself.
advantages of view:
Improved readability: Views can make complex queries easier to read and maintain.
Data security: Views can limit access to sensitive data by hiding specific rows or columns from unauthorized users.
Storage Capacity: Views take very little space to store the data.
Simplified tables: Views can join and simplify multiple tables into a single virtual table.

What is a materialized view?
A materialized view is a duplicate data table created by combining data from multiple existing tables for faster data retrieval.

what is stored procedure?
A stored procedure in SQL is a group of SQL queries that can be saved and reused multiple times. It is very useful as it reduces the need for rewriting SQL queries. It enhances efficiency, reusability, and security in database management.
Improved Performance: Stored procedures are precompiled and stored in the database, reducing parsing and compilation overhead each time they are executed. This can result in faster execution times, especially for complex queries and operations.
Code Reusability:

Transaction Management: Stored procedures can include transaction management logic (BEGIN TRANSACTION, COMMIT, ROLLBACK), ensuring data integrity and consistency within the database.

SET OPERATIONS IN DBMS:-

UNION: Combines the results of two or more SELECT queries into a single result set, removing duplicates.
Example: SELECT column1 FROM table1 UNION SELECT column2 FROM table2;

UNION ALL: Similar to UNION but includes all rows, including duplicates.
Example: SELECT column1 FROM table1 UNION ALL SELECT column2 FROM table2;

INTERSECT: Returns the common rows between the results of two SELECT queries.
Example: SELECT column1 FROM table1 INTERSECT SELECT column1 FROM table2;

MINUS: Returns the rows that are present in the first SELECT query but not in the second SELECT query.
Example: SELECT column1 FROM table1 EXCEPT SELECT column1 FROM table2;


1.explain various concurrency control techniques in dbms?
Concurrency control techniques in Database Management Systems (DBMS) ensure that transactions are executed correctly and concurrently without causing data inconsistency or loss. Here are various concurrency control techniques:

1. Lock-Based Concurrency Control:
Description: Transactions acquire locks on data items to ensure exclusive access.
Types:
Two-Phase Locking (2PL): Transactions acquire locks in two phases (growing phase and shrinking phase) and release them only in the shrinking phase.
Strict Two-Phase Locking (S2PL): Transactions hold all locks until the end of the transaction.

Timestamp-Based Concurrency Control:
Description: Assigns a unique timestamp to each transaction and data item to order transactions and resolve conflicts.
Types:
Timestamp Ordering Protocol (TO): Transactions are ordered based on their timestamps.
Thomas Write Rule: Determines which transaction's write operation should be chosen when there is a write-write conflict.

explain locks in dbms?
Locks in database management systems (DBMS) are mechanisms used to control concurrent access to shared data by multiple transactions.

Shared Lock (S-Lock): Allows multiple transactions to read a resource simultaneously but prevents any transaction from writing to it.

Exclusive Lock (X-Lock): Grants exclusive access to a resource, preventing other transactions from reading or writing to it until the lock is released.


what is log in dbms?
In a Database Management System (DBMS), a log is a file that records all changes made to a database, including updates, inserts, and deletes.

what is log based recovery Techniques in dbms?
Log-based recovery is a technique used in Database Management Systems (DBMS) to ensure database consistency and recover from system failures.


indexing in dbms:-
The index is a type of data structure. It is used to locate and access the data in a database table quickly.

Purpose: The primary purpose of an index is to improve the performance of SELECT queries by reducing the number of rows that need to be scanned.

Types of Indexes:

Single-Column Index: Created on a single column.

Composite Index: Created on multiple columns.

Unique Index: Ensures that indexed columns have unique values.

clustered index:A clustered index determines the  order in which data is physically stored in table . ex:dictionary.
a table can have only one clusterd index
it is faster

un-clusterd index:a non-clustered index is stored at one place and table data is stored in another place ex:book index page
can have multiple clusterd indexes
it is slower
